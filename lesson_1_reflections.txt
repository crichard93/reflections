Q: How did viewing a diff between two versions of a file help you see the bug that was introduced?

a: It helped by highlighting differences in the two versions and drew my attention to them.


Q: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

A: Easy to revert to old version if you make mistakes. 


Q: What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

A: The pros:
1. You can save at the end of each feature/change and ensure it's complete
2. You decide on the size of changes between commits
The cons:
1. You may forget to create a commit
2. If the PC crashes before you planned on creating a commit, everything is lost until last commit


Q: How might using version control make you more confident to make changes that could break something?

A: Easy to revert to old version without bugs and compare to new versions to see where bug was introduced. 

Now that you have your workspace set up, what do you want to try using Git for?
My next coding project on Udacity to take more risks while I put it together.

git keywords:
git diff: compares two commit versions
git clone: copies a repository
git checkout: sets file in repository to a commit
git log: displays all the commit id's starting from most recent
