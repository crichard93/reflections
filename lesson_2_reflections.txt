Q: What happens when you initialize a repository? Why do you need to do it?

A: The .git file is generated in the current directory, but no commits are created. All files in the directory are currently untracked by the git log. 


Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

A: The staging area is an intermediate area that doesn't quite affect anything on it's own. It gives you one last checkpoint before you commit anything to a repository. 


Q: How can you use the staging area to make sure you have one commit per logical change?

A: Using git diff command, you can view review changes before committing them. 


Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: Branches are useful when making alterations to a code base because they maintain the previous commit history and add to it on a separate path. They can be used to easily keep track of new features, such as different difficulties or languages being added. 

Q: How do the diagrams help you visualize the branch structure?

A: With diagrams, easily able to see where new branches were created and the latest commits for each branch. 


Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: The master and the non-master branch use the commit at which they split as their reference for merging. Lines added and deleted from the reference split will be present (or not present) in the merged commit. The non-master and master commits are included in the merged commit's log. The timestamps are used to order the commits. 
It's represent with a split path to show that a merge took place and the branch and master has their own sets of commits that can be reached. 















Notes:
Working Directory vs staging Area vs Repository
WD: Contains files that are being worked on
SA: Files must be staged before being committed to the repository
R: Contains versions of files that have been committed 

Useful commands in git:
git checkout -b new_branch_name: Creates a new branch and checks it out 
git checkout commit_name or branch_name: used to checkout branches
git log --graph --oneline branch_name branch_name ... : gives history of branches in a graphic form with logs on one line for readability